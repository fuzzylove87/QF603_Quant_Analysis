# import module
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# import data
data = pd.read_excel('Industry_Portfolios.xlsx')
# Data.index=Data.Date
# del Data['Date']
del data['Date']

# 1.Calculate the vector of mean returns and covariance matrix of
#    returns for the ten industry portfolios.
column_return = data.mean(axis=0)
# Return=np.mean(data,axis=0)
column_std = data.std(axis=0)
# Std=np.std(data,axis=0)
cov = data.cov()

# 2.Create a table showing the mean returns and standard deviation of returns
#   for the ten industry portfolios.?

# column_return.to_frame(name='mean')
# column_std.to_frame(name='Standard Deviation')


# 3.Also plot the minimum-variance frontier generated by the ten industry portfolios
#  with mean return on the y axis and standard deviation of return on the x axis.
e = np.ones((10, 1))
e1 = np.ones((1, 10))
cov1 = np.linalg.inv(cov)
delta = np.dot(np.dot(e1, cov1), e)
zeta = np.dot(column_return, np.dot(cov1, column_return))
alpha = np.dot(column_return, np.dot(cov1, e))
Rp = np.arange(0, 2, 0.001)  # divide target return
Var_P = np.zeros(len(Rp))
for i in range(len(Rp)):
    lamda = (delta * Rp[i] - alpha) / (zeta * delta - alpha ** 2)
    gamma = (zeta - alpha * Rp[i]) / (zeta * delta - alpha ** 2)
    w_star = lamda * np.dot(cov1, column_return) + gamma * np.dot(cov1, e).T
    Var_P[i] = (1 / delta + delta / (zeta * delta - alpha ** 2) * (Rp[i] - alpha / delta) ** 2)
SD_P = np.power(Var_P, 0.5)
Rmv = alpha / delta
plt.plot(SD_P, Rp, 'r', label='Asset Allocation(only risky assets)')
plt.title('Mean-Variance Efficient Frontier')
plt.xlabel('Standard deviation of portfolio')
plt.ylabel('Rp')
var_g = 1 / delta
std_g = np.sqrt(var_g)
plt.plot(std_g, Rmv, '*')
plt.text(0.1 + std_g, Rmv, 'Rmv')

Rf = 0.13
Rmv = alpha / delta
Rtg = (alpha * Rf - zeta) / (delta * Rf - alpha)
Seg = -(zeta - 2 * alpha * Rf + delta * Rf ** 2) ** (1 / 2) / (delta * (Rf - Rmv))
Var_P1 = np.zeros(len(Rp))
for i in range(len(Rp)):
    Var_P1[i] = (Rp[i] - Rf) ** 2 / (zeta - 2 * alpha * Rf + delta * Rf ** 2)
SD_P1 = np.power(Var_P1, 0.5)
plt.plot(SD_P1, Rp, 'black', label='Asset Allocation with risk-free asset')
plt.legend()
plt.show()


























